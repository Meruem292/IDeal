rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/admins/$(userId));
    }
    
    function isFaculty(userId) {
      return exists(/databases/$(database)/documents/faculty/$(userId));
    }
    
    function isStudent(userId) {
      return exists(/databases/$(database)/documents/students/$(userId));
    }

    // Admins Collection: Only readable by other admins.
    match /admins/{adminId} {
      allow read, write: if isAdmin(request.auth.uid);
    }

    // Faculty Collection:
    // Admins can manage faculty.
    // Authenticated users can list/read faculty (for dropdowns).
    // Faculty can read their own profile.
    match /faculty/{facultyId} {
      allow get, list: if request.auth != null;
      allow create, update, delete: if isAdmin(request.auth.uid);
    }

    // Students Collection:
    // Anyone can create a student (register).
    // Admins/Faculty can view all students.
    // Students can view/update their own profile.
    match /students/{studentId} {
      allow create: if request.auth.uid == studentId; // For registration
      allow get: if request.auth.uid == studentId || isFaculty(request.auth.uid) || isAdmin(request.auth.uid);
      allow list: if isFaculty(request.auth.uid) || isAdmin(request.auth.uid);
      allow update: if request.auth.uid == studentId || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }
    
    // RFID History Collection:
    // Admins can read the entire history.
    // Students can only read their own history.
    // Only the device can write to it (no client writes).
    match /rfid_history/{scanId} {
      allow read: if isAdmin(request.auth.uid) || 
                   (isStudent(request.auth.uid) && get(/databases/$(database)/documents/students/$(request.auth.uid)).data.rfid == resource.data.uid);
      allow list: if isAdmin(request.auth.uid) || isStudent(request.auth.uid); // List is further filtered by UID in app query
      allow write: if false; // No client-side writes
    }
    
    // Sections and Schedules:
    // Admins can manage sections and schedules.
    // Faculty can read sections and schedules.
    match /sections/{sectionId} {
      allow get, list: if isAdmin(request.auth.uid) || isFaculty(request.auth.uid);
      allow create, update, delete: if isAdmin(request.auth.uid);

      match /schedules/{scheduleId} {
        allow get, list: if isAdmin(request.auth.uid) || isFaculty(request.auth.uid);
        allow create, update, delete: if isAdmin(request.auth.uid);
      }
    }
  }
}