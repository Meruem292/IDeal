rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuth() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isSelf(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // --- Collection Rules ---

    match /admins/{userId} {
      // Any authenticated user trying to log in needs to check if they are an admin.
      allow get: if isAuth(); 
      // Admins can list, update, and delete other admins.
      allow list, update, delete: if isAdmin();
      // An existing admin can create another admin.
      allow create: if isAdmin();
    }

    match /students/{studentId} {
      // Any authenticated user can create a student record (for registration).
      allow create: if isAuth(); 
      // An admin can list students. A student can get their own profile.
      // Any authenticated user can check their own student document during login.
      allow get: if isAuth();
      allow list: if isAdmin();
      // Only an admin or the student themselves can update their profile.
      allow update: if isAdmin() || isSelf(studentId);
      // Only an admin can delete a student.
      allow delete: if isAdmin();

      // Rules for the attendance sub-collection
      match /attendance/{attendanceId} {
        // An admin can create records (simulating the scanner)
        allow create: if isAdmin();
        // The student themselves or an admin can read the attendance records.
        allow read: if isSelf(studentId) || isAdmin();
        // Only admins can modify or delete specific attendance logs.
        allow update, delete: if isAdmin();
      }
    }

    match /faculty/{facultyId} {
       // Any authenticated user can check their own faculty document during login.
      allow get: if isAuth();
      allow list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }
    
    match /sections/{sectionId} {
      allow read: if isAdmin();
      allow create, update, delete: if isAdmin();
      
      match /schedules/{scheduleId} {
        allow read: if isAdmin();
        allow create, update, delete: if isAdmin();
      }
    }

    // --- RFID History Collection ---
    // This allows any service (like an ESP32) to write a scan.
    // In production, you would secure this with a secret key or cloud function.
    match /rfid_history/{docId} {
      allow create: if true; 
      // Admins can read all history. Students can read their own.
      allow read: if isAdmin() || (isAuth() && resource.data.uid == get(/databases/$(database)/documents/students/$(request.auth.uid)).data.rfid);
      allow update, delete: if isAdmin();
    }
  }
}
