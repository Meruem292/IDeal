rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isSelf(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuth() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // --- Collection Rules ---

    match /admins/{userId} {
      // Allow an admin to read their own document, needed for role checks.
      // Admins can manage other admins.
      allow get: if isSelf(userId) || isAdmin();
      allow list, create, update, delete: if isAdmin();
    }

    match /students/{studentId} {
      // Allow unauthenticated users to create an account during registration.
      allow create: if true;
      // Admins and faculty can read any student profile. A student can read their own.
      allow get, list: if isAdmin() || exists(/databases/$(database)/documents/faculty/$(request.auth.uid)) || isSelf(studentId);
      // An admin can update any student. A student can update their own profile.
      allow update: if isAdmin() || isSelf(studentId);
      // Only an admin can delete a student.
      allow delete: if isAdmin();
    }

    match /faculty/{facultyId} {
      // Any authenticated user can read faculty profiles. This is needed for the login role check.
      allow get: if isAuth();
      allow list: if isAdmin() || exists(/databases/$(database)/documents/faculty/$(request.auth.uid));
      // Only an admin can manage faculty.
      allow create, update, delete: if isAdmin();
    }
    
    match /sections/{sectionId} {
      // Admins and faculty can read section info.
      allow read: if isAdmin() || exists(/databases/$(database)/documents/faculty/$(request.auth.uid));
      // Only admins can manage sections and schedules.
      allow write: if isAdmin();
      
      match /schedules/{scheduleId} {
        allow read: if isAdmin() || exists(/databases/$(database)/documents/faculty/$(request.auth.uid));
        allow write: if isAdmin();
      }
    }

    match /rfid_history/{docId} {
      // Admins can see all history.
      // Students can only see their own history (by querying where 'uid' == their rfid).
      // The rules can't enforce this query directly, so we allow reads for authenticated users
      // and rely on the query in the app to be correct. The useAuthRole hook prevents role bypass.
      allow read: if isAdmin() || isAuth();
      
      // IMPORTANT: For production, this should be secured.
      // For now, allowing any write so the ESP32 can post data without authentication.
      allow write: if true;
    }
  }
}
