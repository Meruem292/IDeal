rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isRole(role) {
      return isAuth() && exists(/databases/$(database)/documents/$(role)/$(request.auth.uid));
    }
    
    function isSelf(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // --- Collection Rules ---
    match /admins/{userId} {
      allow get: if isAuth(); // Allow any auth user to check for their own doc
      allow list, create, update, delete: if isRole('admins');
    }

    match /students/{studentId} {
      // Allow unauthenticated users to query for uniqueness check during registration.
      // This is a calculated risk. A more secure approach might involve a Cloud Function.
      allow list: if true; 
      allow create: if isAuth(); 
      allow get: if isAuth(); // Allow any auth user to check for their own doc
      allow update: if isRole('admins') || isSelf(studentId);
      allow delete: if isRole('admins');
    }

    match /faculty/{facultyId} {
      allow get: if isAuth(); // Allow any auth user to check for their own doc
      allow list: if isRole('admins') || isRole('faculty');
      allow create, update, delete: if isRole('admins');
    }
    
    match /sections/{sectionId} {
      allow get, list: if isRole('admins') || isRole('faculty');
      allow create, update, delete: if isRole('admins');
      
      match /schedules/{scheduleId} {
        allow get, list: if isRole('admins') || isRole('faculty');
        allow create, update, delete: if isRole('admins');
      }
    }

    match /rfid_history/{docId} {
      // This rule is still insecure. In a real-world scenario,
      // you would use a Cloud Function with a secret key for the ESP32 to call.
      allow create: if true; 
      
      // Allow admins to read all history, students to read their own
      allow get, list: if isRole('admins') || (isRole('students') && query.filters[0][2] == request.auth.uid);
      allow update, delete: if isRole('admins');
    }
  }
}
